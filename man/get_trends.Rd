% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trends.R
\name{get_trends}
\alias{get_trends}
\title{GET trends/place}
\usage{
get_trends(woeid = 1, lat = NULL, lng = NULL, exclude = FALSE,
  token = NULL, parse = TRUE)
}
\arguments{
\item{woeid}{Numeric, WOEID (Yahoo! Where On Earth ID) or
character string of desired town or country. Users may also supply
latitude and longitude coordinates to fetch the closest available trends
data given the provided location. Latitutde/longitude coordinates should
be provided as woeid value consisting of 2 numeric values or via one
lat value and one lng value (to the appropriately named parameters).
To browse all available trend places, see \code{\link{trends_available}}}

\item{lat}{Optional alternative to woeid. Numeric, latitude in degrees.
If two coordinates are providded for woeid, this function will coerce the
first value to lat.}

\item{lng}{Optional alternative to woeid. Numeric, longitude in degrees.
If two coordinates are providded for woeid, this function will coerce the
second value to lng.}

\item{exclude}{Logical, indicating whether or not to exclude
hashtags}

\item{token}{OAuth token. By default \code{token = NULL} fetches a
non-exhausted token from an environment variable. Find instructions
on how to create tokens and setup an environment variable in the
tokens vignette (in r, send \code{?tokens} to console).}

\item{parse}{Logical, indicating whether or not to parse return
trends data. Defaults to true.}
}
\value{
Tibble data frame of trends data for a given geographical area.
}
\description{
Returns Twitter trends
}
\examples{
\dontrun{
## Retrieve available trends
trends <- trends_available()
trends

## Store WOEID for Worldwide trends
worldwide <- trends$woeid[grep("world", trends$name, ignore.case = TRUE)[1]]

## Retrieve worldwide trends datadata
ww_trends <- get_trends(worldwide)

## Preview trends data
ww_trends

## Retrieve trends data using latitude, longitude near New York City
nyc_trends <- get_trends_closest(lat = 40.7, lng = -74.0)

## should be same result if lat/long supplied as first argument
nyc_trends <- get_trends_closest(c(40.7, -74.0))

## Preview trends data
nyc_trends

## Provide a city or location name using a regular expression string to
## have the function internals do the woeid lookup/matching for you
(luk <- get_trends("london"))
}

}
\seealso{
Other trends: \code{\link{trends_available}}
}
