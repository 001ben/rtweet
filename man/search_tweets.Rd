% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/search.R
\name{search_tweets}
\alias{search_tweets}
\title{search_tweets}
\usage{
search_tweets(q, n = 100, type = "recent", max_id = NULL,
  include_rts = TRUE, parse = TRUE, usr = TRUE, token = NULL,
  retryonratelimit = FALSE, verbose = TRUE, ...)
}
\arguments{
\item{q}{Query to be searched, used in filtering relevant tweets
to return from Twitter's REST API. Should be a character
string not to exceed 500 characters maximum. Spaces are assumed
to function like boolean "AND" operators. To search for tweets
including one of multiple possible terms, separate search terms
with spaces and the word "OR". For example, the search
\code{query = "data science"} searches for tweets using both
"data" and "science" though the words can appear anywhere and
in any order in the tweet. However, when OR is added between
search terms, \code{query = "data OR science"}, Twitter's REST
API should return any tweet that includes either "data" or
"science" appearing in the tweets. It is also possible to search
for exact phrases uses double quotations. To do this, either
wrap single quotes around a search including double quotes, e.g.,
\code{q = '"data science"'} or escape internal double quotes
using a single backslash, e.g., \code{q = "\"data science\""}.}

\item{n}{Numeric, specifying the total number of desired tweets to
return. Defaults to 100. Maximum number of tweets returned from
a single token is 18,000. To return more than 18,000 tweets, users
are encourages to set \code{retryonratelimit} to TRUE. See details
for more information.}

\item{type}{Character string specifying which type of search
results to return from the REST API. The current default is
\code{type = "recent"}, other valid types include
\code{type = "mixed"} and \code{type = "popular"}.}

\item{max_id}{Character string specifying the [oldest] status
id beyond which search results should resume returning.
Especially useful large data returns that require multiple
iterations interrupted by user time constraints. For searches
exceeding 18,000 tweets, users are encouraged to take advantage
of rtweet's internal automation procedures for waiting on
rate limits via setting \code{retryonratelimit} to TRUE.
However, due to processing time and rate limits, retreiving
several million tweets can take several hours or multiple days.
In these situations, it may be useful to leverage
\code{retryonratelimit} for chunks, using the \code{max_id}
parameter to allow one search to continue where the previous
search left off.}

\item{include_rts}{Logical, indicating whether to include retweets
in search results. Retweets are classified as any tweet
generated by Twitter's built-in "retweet" (recycle arrows)
function. These are distinct from quotes (retweets with
additional text provided from sender) or manual retweets
(old school method of manually entering "RT" into the text
of one's tweets).}

\item{parse}{Logical, indicating whether to return parsed
(data.frames) or nested list (fromJSON) object. By default,
\code{parse = TRUE} saves users from the time
[and frustrations] associated with disentangling the Twitter
API return objects.}

\item{usr}{Logical indicating whether to return users data frame.
Defaults to true, see \code{\link{users_data}}.}

\item{token}{OAuth token. By default \code{token = NULL} fetches a
non-exhausted token from an environment variable. Find
instructions on how to create tokens and setup an environment
variable in the tokens vignette (in r, send \code{?tokens} to
console).}

\item{retryonratelimit}{Logical indicating whether to wait and
retry when rate limited. This argument is only relevant if the
desired return (n) exceeds the remaining limit of available
requests. Defaults to false. Set this value to TRUE to automate
large searches (i.e., n > 18000). For many searches, esp.
specific or specialized searches, there won't be more than
18,000 tweets to return. But for broad, generic, or popular
topics, the total number of tweets within the REST window of
time (7-10 days) can easily reach the millions.}

\item{verbose}{Logical, indicating whether or not to include
output processing/retrieval messages. Defaults to TRUE. For
larger searches, messages include rough estimates for time
remaining between searches. It should be noted, however, that
these time estimates only describe the amount of time between
searches and not the total time remaining. For large searches
conducted with \code{retryonratelimit} set to TRUE, the
estimated retreival time can be estimated by dividing the number
of requested tweets by 18,000 and then multiplying the quotient
by 15 (token cooldown time, in minutes).}

\item{\dots}{Futher arguments passed on to \code{make_url}.
All named arguments that do not match the above arguments
(i.e., count, type, etc.) will be built into the request.
To return only English language tweets, for example, use
\code{lang = "en"}. For more options see Twitter's
API documentation.}
}
\value{
List object with tweets and users each returned as a
  data frame.
}
\description{
Returns two data frames (tweets data and users data)
  using a provided search query.
}
\details{
Twitter API document recommends limiting searches to
  10 keywords and operators. Complex queries may also produce
  API errors preventing recovery of information related to
  the query.
  It should also be noted Twitter's search API does not consist
  of an index of all Tweets. At the time of searching, the
  search API index includes between only 6-9 days of Tweets.


  Number of tweets returned will often be less than what was
  specified by the user. This can happen because (a) the search
  query did not return many results (the search pool is already
  thinned out from the population of tweets to begin with) or
  (b) because you hit your rate limit for a given token. Even if
  the query has lots of hits and the rate limit should be able to
  max out at 18,000, the returned number of tweets may be lower,
  but that's only because the functions filter out duplicates
  (e.g., 18,000 tweets were actually returned, but 30 of them were
  removed because they were repeats).
}
\examples{
\dontrun{
# search for 1000 tweets mentioning Hillary Clinton
hrc <- search_tweets(q = "hillaryclinton", n = 1000)

# data frame where each observation (row) is a different tweet
hrc

# users data also retrieved. can access it via users_data()
users_data(hrc)

# search for 1000 tweets in English
djt <- search_tweets(q = "realdonaldtrump", n = 1000, lang = "en")
djt # prints tweets data preview
users_data(djt) # prints users data preview
}
}
\seealso{
\url{https://dev.twitter.com/overview/documentation}

Other tweets: \code{\link{get_favorites}},
  \code{\link{get_timeline}},
  \code{\link{lookup_statuses}},
  \code{\link{stream_tweets}}, \code{\link{tweets_data}}
}

